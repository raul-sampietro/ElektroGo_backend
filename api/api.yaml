openapi: 3.0.1
info:
  version: 1.0.0
  title: ElektroGo
  description: "Documentació OpenAPI per a l'API REST desenvolupada a partir de l'aplicació **ElektroGo**. <br> Per tal de poder executar les operacions cal estar conectat a la VPN de la UPC. Totes les operacions requereixen d'una api_key. En cas de no tenir-ne la podeu solicitar a qualsevol membre de l'equip."
servers:
  - url: 'http://10.4.41.58:8080/'
paths:
  /users:
    get:
      tags:
      - Users
      summary: Obté tots els usuaris.
      operationId: getAllUsers
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/User'
    post:
      tags:
      - Users
      summary: Crea un usuari.
      operationId: postUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        201:
          description: successful operation
        438:
          description: 'Error: User Alredy Exists'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error438'

  /users/{username}:
    get:
      tags:
      - Users
      summary: Obté un usuari donat un username.
      operationId: getUserByUsername
      parameters:
      - name: username
        in: path
        description: Username de l'usuari
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        437:
          description: 'Error: User Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error437'
    delete:
      tags:
      - Users
      summary: Esborra un usuari.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: Username de l'usuari
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
        437:
          description: 'Error: User Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error437'

  /users/provider/{provider}/id/{id}:
    get:
      tags:
      - Users
      summary: Obté un usuari donat un parell (provider, id).
      operationId: getUseryId
      parameters:
      - name: provider
        in: path
        description: Proveïdor de login de l'usuari
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: ID de l'usuari pel proveïdor de login
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        437:
          description: 'Error: User Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error437'

  /ratings:
    post:
      tags:
      - Ratings
      summary: Crea una valoració.
      operationId: postRating
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
        required: true
      responses:
        201:
          description: successful operation
        437:
          description: 'Error: User Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error437'

  /ratings/from/{username}:
    get:
      tags:
      - Ratings
      summary: Obté les valoracions fetes per un usuari.
      operationId: getRatingsMadeUser
      parameters:
      - name: username
        in: path
        description: Username de l'usuari
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Rating'
        437:
          description: 'Error: User Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error437'

  /ratings/to/{username}:
    get:
      tags:
      - Ratings
      summary: Obté les valoracions fetes a un usuari.
      operationId: getRatingsReceivedUser
      parameters:
      - name: username
        in: path
        description: Username de l'usuari
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Rating'
        437:
          description: 'Error: User Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error437'

  /ratings/to/{username}/avg:
    get:
      tags:
      - Ratings
      summary: Obté la valoració mitjana d'un usuari.
      operationId: getAvgRatingUser
      parameters:
      - name: username
        in: path
        description: Username de l'usuari
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvgRating'
        437:
          description: 'Error: User Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error437'

  /ratings/from/{userFrom}/to/{userTo}:
    get:
      tags:
      - Ratings
      summary: Obté una valoració.
      operationId: getRating
      parameters:
      - name: userFrom
        in: query
        description: Username de l'usuari que ha fet la valoració
        required: true
        schema:
          type: string
      - name: userTo
        in: query
        description: Username de l'usuari que ha rebut la valoració
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
        437:
          description: 'Error: User Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error437'
        442:
          description: 'Error: Rating Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error442'
    delete:
      tags:
      - Ratings
      summary: Esborra una valoració.
      operationId: deleteRating
      parameters:
      - name: userFrom
        in: path
        description: Username de l'usuari que ha fet la valoració
        required: true
        schema:
          type: string
      - name: userTo
        in: path
        description: Username de l'usuari que ha rebut la valoració
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
        437:
          description: 'Error: User Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error437'
        442:
          description: 'Error: Rating Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error442'

  /reports:
    get:
      tags:
      - Reports
      summary: Obté totes les denuncies.
      operationId: getAllReports
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Report'
    post:
      tags:
      - Reports
      summary: Crea una denuncia.
      operationId: postReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
        required: true
      responses:
        201:
          description: successful operation
        445:
          description: 'Error: Report Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error445'

  /reports/from/{username}:
    get:
      tags:
      - Reports
      summary: Obté les denuncies fetes per un usuari.
      operationId: getReportsMadeUser
      parameters:
      - name: username
        in: path
        description: Username de l'usuari
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Report'
        437:
          description: 'Error: User Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error437'

  /reports/to/{username}:
    get:
      tags:
      - Reports
      summary: Obté les denuncies fetes a un usuari.
      operationId: getReportsReceivedUser
      parameters:
      - name: username
        in: path
        description: Username de l'usuari
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Report'
        437:
          description: 'Error: User Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error437'

  /reports/from/{userFrom}/to/{userTo}:
    delete:
      tags:
      - Reports
      summary: Esborra una denucnia.
      operationId: deleteReport
      parameters:
      - name: userFrom
        in: path
        description: Username de l'usuari que ha fet la denuncia
        required: true
        schema:
          type: string
      - name: userTo
        in: path
        description: Username de l'usuari que ha rebut la denuncia
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
        437:
          description: 'Error: User Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error437'
        445:
          description: 'Error: Report Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error445'

  /drivers/{username}:
    get:
      tags:
      - Drivers
      summary: Obté un conductor.
      operationId: getDriver
      parameters:
      - name: username
        in: path
        description: Username del conductor
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object 
                $ref: '#/components/schemas/Driver'
        432:
          description: 'Error: Driver Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error432'
    post:
      tags:
      - Drivers
      summary: Crea un conductor.
      operationId: createDriver
      parameters:
      - name: username
        in: path
        description: Username del conductor
        required: true
        schema:
          type: string
      responses:
        201:
          description: successful operation
        439:
          description: 'Error: Driver Alredy Exists'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error439'
    delete:
      tags:
      - Drivers
      summary: Esborra un conductor.
      operationId: deleteDriver
      parameters:
      - name: username
        in: path
        description: Username del conductor
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
        432:
          description: 'Error: Driver Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error432'

  /drivers/{username}/verify:
    put:
      tags:
      - Drivers
      summary: Verifica un conductor.
      operationId: verifyDriver
      parameters:
      - name: username
        in: path
        description: Username del conductor
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
        432:
          description: 'Error: Driver Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error432'

  /vehicles:
    get:
      tags:
      - Vehicles
      summary: Obté tots els vehicles.
      operationId: getVehicles
      parameters:
      - name: notVerified
        in: query
        description: Si es marca com a cert, s'obtenen només els vehicles no verificats. Si es deixa a false o no s'inclou, s'ignora la restricció.
        required: false
        schema:
          type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
  
  /vehicles/{numberPlate}:
    get:
      tags:
      - Vehicles
      summary: Obté un vehicle.
      operationId: getVehicle
      parameters:
      - name: numberPlate
        in: path
        description: Matrícula del vehicle
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Vehicle'
        436:
          description: 'Error: Vehicle Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error436'
    delete:
      tags:
      - Vehicles
      summary: Esborra un vehicle.
      operationId: deleteVehicle
      parameters:
      - name: numberPlate
        in: path
        description: Matrícula del vehicle
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
        436:
          description: 'Error: Vehicle Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error436'

  /vehicles/{numberPlate}/image:
    get:
      tags:
      - Vehicles
      summary: Obté la imatge d'un vehicle.
      operationId: getImatgeVehicle
      parameters:
      - name: numberPlate
        in: path
        description: Matrícula del vehicle
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation. S'obté un arxiu PNG.
          content:
            application/json:
              schema:
                type: object 
                $ref: '#/components/schemas/Blank'
        436:
          description: 'Error: Vehicle Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error436'
    post:
      tags:
      - Vehicles
      summary: Afegeix o modifica la imatge d'un vehicle.
      operationId: putImatgeVehicle
      requestBody:
        description: Un arxiu PNG
        content:
            application/json:
              schema:
                type: object 
                $ref: '#/components/schemas/Blank'
      parameters:
      - name: numberPlate
        in: path
        description: Matrícula del vehicle
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
        436:
          description: 'Error: Vehicle Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error436'

  /vehicles/{numberPlate}/verify:
    put:
      tags:
      - Vehicles
      summary: Verifica un vehicle.
      operationId: verifyVehicle
      parameters:
      - name: numberPlate
        in: path
        description: Matrícula del vehicle
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
        436:
          description: 'Error: Vehicle Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error436'

  /vehicles/from/{username}:
    get:
      tags:
      - Vehicles
      summary: Obté tots els vehicles d'un conductor.
      operationId: getVehiclesDriver
      parameters:
        - name: username
          in: path
          description: Username del conductor
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
        432:
          description: 'Error: Driver Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error432'
    post:
      tags:
      - Vehicles
      summary: Crea un vehicle per un conductor.
      operationId: postDriverVehicle
      parameters:
        - name: username
          in: path
          description: Username del conductor
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
      responses:
        201:
          description: successful operation
        432:
          description: 'Error: Driver Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error432'
        436:
          description: 'Error: Vehicle Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error436'
        433:
          description: 'Error: Driver Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error433'
      
  /vehicles/{numberPlate}/from/{username}:
    delete:
      tags:
      - Vehicles
      summary: Esborra un vehicle d'un conductor.
      operationId: deleteDriverVehicle
      parameters:
      - name: numberPlate
        in: path
        description: Matrícula del vehicle
        required: true
        schema:
          type: string
      - name: username
        in: path
        description: Username del conductor
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
        432:
          description: 'Error: Driver Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error432'
        436:
          description: 'Error: Vehicle Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error436'
        433:
          description: 'Error: DriverVehicle Already Exists'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error433'

  /charging-stations:
    get:
      tags:
      - Charging Stations
      summary: Obté totes les estacions de càrrega.
      operationId: getChargingStations
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChargingStation'

  /charging-stations/byCoord:
    get:
      tags:
      - Charging Stations
      summary: Obté totes les estacions de càrrega que es troben dintre del rectangle definit pels punts (latitude1, longitude1) i (latitude2, longitude2).
      operationId: getChargingStationsByCoords
      parameters:
      - name: latitude1
        in: query
        description: Latitud del punt 1
        required: true
        schema:
          type: number
          format: double
      - name: longitude1
        in: query
        description: Longitud del punt 1
        required: true
        schema:
          type: number
          format: double
      - name: latitude2
        in: query
        description: Latitud del punt 2
        required: true
        schema:
          type: number
          format: double
      - name: longitude2
        in: query
        description: Longitud del punt 2
        required: true
        schema:
          type: number
          format: double
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChargingStation'

  /car-pooling:
    get:
      tags:
      - Car Pooling
      summary: Obté tots els trajectes de carpooling.
      operationId: getAllCarPoolings
      parameters:
      - name: order
        in: query
        description: Si es posa a true, el llistat resultant estarà ordenat.
        required: false
        schema:
          type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarPooling'
    post:
      tags:
      - Car Pooling
      summary: Crea un trajecte de carpooling.
      operationId: postCarPooling
      requestBody:
        content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/CarPooling'
      responses:
        201:
          description: successful operation
        444:
          description: 'Error: Trip Already Exists'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error444'


  /car-pooling/{id}:
    get:
      tags:
      - Car Pooling
      summary: Obté un trajecte de carpooling.
      operationId: getCarPooling
      parameters:
      - name: id
        in: path
        description: ID del trajecte de carpooling
        required: true
        schema:
          type: number
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/CarPooling'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
    delete:
      tags:
      - Car Pooling
      summary: Esborra un trajecte de carpooling.
      operationId: deleteCarPooling
      parameters:
      - name: id
        in: path
        description: ID del trajecte de carpooling
        required: true
        schema:
          type: number
      responses:
        200:
          description: successful operation
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'

  /car-pooling/{id}/users:
    get:
      tags:
      - Car Pooling
      summary: Obté tots els usuaris d'un trajecte de carpooling.
      operationId: getCarPoolingUsers
      parameters:
      - name: id
        in: path
        description: Ordenació del llistat resultant ["asc", "desc"]
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/User'
        404:
          description: 'Error: Trip Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'

  /car-pooling/search:
    get:
      tags:
      - Car Pooling
      summary: Cerca trajectes de carpooling segons origen, destí, data i hora.
      operationId: searchCarPooling
      parameters:
      - name: latO
        in: query
        description: Coordenada latitud de l'origen
        required: true
        schema:
          type: number
          format: double
      - name: longO
        in: query
        description: Coordenada longitud de l'origen
        required: true
        schema:
          type: number
          format: double
      - name: latD
        in: query
        description: Coordenada latitud del destí
        required: true
        schema:
          type: number
          format: double
      - name: longD
        in: query
        description: Coordenada longitud del destí
        required: true
        schema:
          type: number
          format: double
      - name: sDate
        in: query
        description: Data a partir de la qual es busca. Si no s'especifica data es busca a partir del dia actual.
        required: false
        schema:
          type: string
          format: date
      - name: sTimeMin
        in: query
        description: Hora d'inici de l'interval de cerca. Si no s'especifica hora d'inici de l'interval ni data, es busca a partir de l'hora actual a tots els dies a partir de l'actual. Si no s'especifica hora d'inici de l'interval però si data, es busca a partir de l'hora actual y la data indicada.
        required: false
        schema:
          type: string
          format: time
      - name: sTimeMax
        in: query
        description: Hora final de l'interval de cerca. Si no s'especifica hora final de l'interval ni data, es busca fins les 23:59 de tots els dies a partir de l'actual. Si no s'especifica hora final de l'interval però si data, es busca fins les 23:59 y la data indicada.
        required: false
        schema:
          type: string
          format: time
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarPooling'
        400:
          description: 'Error: Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'

  /car-pooling/byCoord:
    get:
      tags:
      - Car Pooling
      summary: Donades unes coordenades (latitude i longitude) rep la informació de tots els punts de car pooling vigents dins d'un radi indicat per parametre (en km).
      operationId: getCarPoolingByCoord
      parameters:
      - name: latitude
        in: query
        description: Coordenada latitud de l'origen
        required: true
        schema:
          type: number
      - name: longitude
        in: query
        description: Coordenada longitude de l'origen
        required: true
        schema:
          type: number
      - name: Radi
        in: query
        description: Radi de l'àrea a analitzar (en km).
        required: true
        schema:
          type: number
      - name: key
        in: query
        description: api_key per poder fer servir la API.
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarPooling'
        400:
          description: 'Error: Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'

  /car-pooling/from/{username}:
    get:
      tags:
      - Car Pooling
      summary: Obté tots els trajectes de carpooling d'un usuari.
      operationId: getCarPoolingsUser
      parameters:
      - name: username
        in: path
        description: Username de l'usuari
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarPooling'
        437:
          description: 'Error: User Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error437'
    
  /car-pooling/{id}/from/{username}:
    post:
      tags:
      - Car Pooling
      summary: Associa un trajecte de carpooling i un usuari.
      operationId: deleteCarPoolingsUser
      parameters:
      - name: username
        in: path
        description: Username de l'usuari
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: ID del trajecte de carpooling
        required: true
        schema:
          type: number
      responses:
        200:
          description: successful operation
        437:
          description: 'Error: User Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error437'
        404:
          description: 'Error: Trip Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        448:
          description: 'Error: UserTrip Already Exists'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error448'
    delete:
      tags:
      - Car Pooling
      summary: Desassocia un trajecte de carpooling amb un usuari.
      operationId: postCarPoolingsUser
      parameters:
      - name: username
        in: path
        description: Username de l'usuari
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: ID del trajecte de carpooling
        required: true
        schema:
          type: number
      responses:
        201:
          description: successful operation
        437:
          description: 'Error: User Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error437'
        404:
          description: 'Error: Trip Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        447:
          description: 'Error: UserTrip Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error447'
    
  /routes/calculate:
    get:
      tags:
      - Routes
      summary: Obté tots els trajectes de carpooling d'un usuari.
      operationId: calculateRoute
      parameters:
      - name: latO
        in: query
        description: Coordenada latitud de l'origen
        required: true
        schema:
          type: number
          format: double
      - name: longO
        in: query
        description: Coordenada longitud de l'origen
        required: true
        schema:
          type: number
          format: double
      - name: latD
        in: query
        description: Coordenada latitud del destí
        required: true
        schema:
          type: number
          format: double
      - name: longD
        in: query
        description: Coordenada longitud del destí
        required: true
        schema:
          type: number
          format: double
      - name: range
        in: query
        description: Rang del vehicle en km
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'

  /chats/messages:
    get:
      tags:
      - Chats
      summary: Obté tots els missatges.
      operationId: getAllMessages
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
  
  /chats/messages/{username1}/{username2}:
    get:
      tags:
      - Chats
      summary: Obté tots els missatges entre dos usuaris.
      operationId: getAllMessagesUsers
      parameters:
      - name: username1
        in: path
        description: Username de l'usuari1
        required: true
        schema:
          type: string
      - name: username2
        in: path
        description: Username de l'usuari2
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        437:
          description: 'Error: User Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error437'
    post:
      tags:
      - Chats
      summary: Crea un missatge.
      operationId: postMessage
      parameters:
      - name: username1
        in: path
        description: Username de l'usuari remitent
        required: true
        schema:
          type: string
      - name: username2
        in: path
        description: Username de l'usuari revedor
        required: true
        schema:
          type: string
      responses:
        201:
          description: successful operation
        437:
          description: 'Error: User Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error437'

  /chats/{username}:
    get:
      tags:
      - Chats
      summary: Obté tots els xats de l'usuari.
      operationId: getAllChats
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'
        437:
          description: 'Error: User Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResultElektroGo'
              examples:
                errorExample:
                  $ref: '#/components/examples/error437'

components:
  schemas:
    Blank:
      type: object

    User:
      type: object
      properties:
        username:
          type: string
          example: "samito"
        email:
          type: string
          example: "samito33@gmail.com"
        id:
          type: string
          example: "104069839557168305566"
        provider:
          type: string
          example: "GOOGLE"
        name:
          type: string
          example: "Samuel Daniel Foster"
        givenName:
          type: string
          example: "Samuel"
        familyName:
          type: string
          example: "Daniel Foster"
        imageUrl:
          type: string
          example: "https://lh3.googleusercontent.com/a-/AOh14GiIcAvvngHoDsa9CP5KmAgA1CfJglhCJjnjJR-z"
    
    Rating:
      type: object
      properties:
        userWhoRates:
          type: string
          example: "samito"
        ratedUser:
          type: string
          example: "cuquet"
        points:
          type: integer
          example: 4
        comment:
          type: string
          example: "Molt bon conductor"

    AvgRating:
      type: object
      properties:
        ratingValue:
          type: number
          format: float
          example: 6.0
        numberOfRatings:
          type: integer
          example: 2

    Report:
      type: object
      properties:
        userWhoReports:
          type: string
          example: "samito"
        reportedUser:
          type: string
          example: "cuquet"
        reason:
          type: string
          example: "Es un mal company de cotxe"

    Driver:
      type: object
      properties:
        username:
          type: string
          example: "samito"
        status:
          type: string
          example: "verified"

    Vehicle:
      type: object
      properties:
        brand:
          type: string
          example: Tesla
        model:
          type: string
          example: Model X
        numberPlate:
          type: string
          example: 4692HKL
        drivingRange:
          type: integer
          example: 540
        fabricationYear:
          type: integer
          example: 2021
        seats:
          type: integer
          example: 6

    ChargingStation:
      type: object
      properties:
        id:
          type: integer
          example: 1
        promotor_gestor:
          type: string
          example: "CC ALDI"
        acces:
          type: string
          example: "APARCAMENT CC"
        tipus_velocitat:
          type: string
          example: "NORMAL"
        tipus_connexio:
          type: string
          example: "MENNEKES.F"
        latitude:
          type: number
          format: double
          example: 41.32116500
        longitude:
          type: number
          format: double
          example: 2.02770200
        designacio_descriptiva:
          type: string
          example: "CC ALDI"
        kw:
          type: number
          format: double
          example: 22.0
        ac_dc:
          type: string
          example: "AC"
        ide_pdr:
          type: string
          example: "PIRVEC-24"
        numberOfChargers:
          type: string
          example: "4"
        tipus_vehicle:
          type: string
          example: "cotxe"
        fcs:
          type: string
          example: null
    
    CarPooling:
      type: object
      properties:
        id:
          type: integer
          example: 1
        startDate:
          type: string
          format: date (yyyy-mm-dd)
          example: "2022-01-20"
        startTime:
          type: string
          format: time 24h
          example: "12:00:00"
        offeredSeats:
          type: integer
          example: 4
        occupiedSeats:
          type: integer
          example: 2
        restrictions:
          type: string
          example: 'No es pot fumar dins del vehícle'
        details:
          type: string
          example: 'Acostumo a conduir bastant ràpid'
        vehicleNumberPlate:
          type: string
          example: "2001MMO"
        origin:
          type: string
          example: "FIB Facultat d'Informàtica de Barcelona, C/Jordi Girona, 1-3, 08034 Barcelona"
        destination:
          type: string
          example: "Estadi Montilivi, Avinguda de Montilivi, 141, 17003 Girona"
        username:
          type: string
          example: "PolB"
        cancelDate: 
          type: string
          format: date (yyyy-mm-dd)
          example: "2022-01-19"
        latitudeOrigin: 
          type: number
          example: 41.3894
        longitudeOrigin:
          type: number
          example: 2.1134
        latitudeDestination: 
          type: number
          example: 41.9611
        longitudeDestination:
          type: number
          example: 2.8279
    
    Point:
      type: object
      properties:
        name:
          type: string
          example: point
        latitude:
          type: number
          format: double
          example: 41.3894
        longitude:
          type: number
          format: double
          example: 2.1134

    Route:
      type: integer
      example: 41.3894

    Message:
      type: object
      properties:
        sender:
          type: string
          example: "samito"
        receiver:
          type: string
          example: "cuquet"
        message:
          type: string
          example: "Hola, com estas?"
        sentAt:
          type: string
          format: date-time
          example: "2022-05-13T21:41:52.369+00:00"

    Chat:
      type: string
      example: "cuquet"

         
    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum: [400, 401, 404]
        error: 
          type: string
          enum: ["Bad Request", "Unauthorized", "Not found"]
        message: 
          type: string

    ErrorResultElektroGo:
      type: object
      properties:
        timestamp:
          type: string
        status:
          type: integer
        error:
          type: string
        path:
          type: string


  examples:
    error400:
      value:
        status: 400
        error: "Bad Request"
        message: "Missing parameter"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "Unvalid api key"
    error404:
      value:
        status: 404
        error: "Not found"
        message: "There are no trips in the radius specified"
    error432:
      value:
        timestamp: "2022-05-13T21:41:52.369+00:00"
        status: 432
        error: "Http Status 432"
        path: "/drivers"
    error433:
      value:
        timestamp: "2022-05-13T21:41:52.369+00:00"
        status: 433
        error: "Http Status 433"
        path: "/drivers/samito/vehicles/4692HKL"
    error435:
      value:
        timestamp: "2022-05-13T21:41:52.369+00:00"
        status: 435
        error: "Http Status 435"
        path: "/vehicles"
    error436:
      value:
        timestamp: "2022-05-13T21:41:52.369+00:00"
        status: 436
        error: "Http Status 436"
        path: "/vehicles/4692HKL/image"
    error437:
      value:
        timestamp: "2022-05-13T21:41:52.369+00:00"
        status: 437
        error: "Http Status 437"
        path: "/users"
    error438:
      value:
        timestamp: "2022-05-13T21:41:52.369+00:00"
        status: 438
        error: "Http Status 438"
        path: "/users"
    error439:
      value:
        timestamp: "2022-05-13T21:41:52.369+00:00"
        status: 439
        error: "Http Status 439"
        path: "/drivers/samito"
    error442:
      value:
        timestamp: "2022-05-13T21:41:52.369+00:00"
        status: 442
        error: "Http Status 442"
        path: "/users/ratings"
    error444:
      value:
        timestamp: "2022-05-13T21:41:52.369+00:00"
        status: 444
        error: "Http Status 444"
        path: "/users/reports"
    error445:
      value:
        timestamp: "2022-05-13T21:41:52.369+00:00"
        status: 445
        error: "Http Status 445"
        path: "/users/reports"
    error447:
      value:
        timestamp: "2022-05-13T21:41:52.369+00:00"
        status: 447
        error: "Http Status 447"
        path: "/users/samito/trips/2"
    error448:
      value:
        timestamp: "2022-05-13T21:41:52.369+00:00"
        status: 448
        error: "Http Status 448"
        path: "/users/samito/trips/2"
